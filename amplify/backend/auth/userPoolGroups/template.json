{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "authcognitoa31803d7UserPoolId": {
        "Type": "String",
        "Default": "authcognitoa31803d7UserPoolId"
      },
      "authcognitoa31803d7IdentityPoolId": {
        "Type": "String",
        "Default": "authcognitoa31803d7IdentityPoolId"
      },
      "authcognitoa31803d7AppClientID": {
        "Type": "String",
        "Default": "authcognitoa31803d7AppClientID"
      },
      "authcognitoa31803d7AppClientIDWeb": {
        "Type": "String",
        "Default": "authcognitoa31803d7AppClientIDWeb"
      },
      "AuthRoleArn": {
        "Type": "String"
        },
        "UnauthRoleArn": {
            "Type": "String"
        },
        "env": {
            "Type": "String"
        }
    },
    "Conditions": {
        "ShouldNotCreateEnvResources": {
            "Fn::Equals": [
                {
                    "Ref": "env"
                },
                "NONE"
            ]
        }
    },
    "Resources": {
    
        "socialmediauserpoolgroupGroup": {
          "Type" : "AWS::Cognito::UserPoolGroup",
          "Properties" : {
            "GroupName": "socialmediauserpoolgroup",
            "Precedence": 1,
            "RoleArn": {
              "Fn::GetAtt": [
                "socialmediauserpoolgroupGroupRole",
                "Arn"
              ]
            },
            "UserPoolId": {
              "Ref": "authcognitoa31803d7UserPoolId"
            }
          }
        },
      "socialmediauserpoolgroupGroupRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "authcognitoa31803d7UserPoolId"
                },
                "-socialmediauserpoolgroupGroupRole"
              ]
            ]
          },
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "",
                "Effect": "Allow",
                "Principal": {
                  "Federated": "cognito-identity.amazonaws.com"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "cognito-identity.amazonaws.com:aud": {
                      "Ref": "authcognitoa31803d7IdentityPoolId"
                    }
                  },
                  "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated"
                  }
                }
              }
            ]
          }
        }
      },
      "LambdaExecutionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": {
            "Fn::If": [
              "ShouldNotCreateEnvResources",
              {
              },
              {
                "Fn::Join": [
                  "",
                  [
                    "cognitoa31803d7",
                    "-ExecutionRole-",
                    {
                      "Ref": "env"
                    }
                  ]
                ]
              }
            ]
          },
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "UserGroupLogPolicy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "arn:aws:logs:*:*:*"
                  }
                ]
              }
            },
            {
              "PolicyName": "UserGroupExecutionPolicy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cognito-identity:SetIdentityPoolRoles",
                      "cognito-identity:ListIdentityPools",
                      "cognito-identity:describeIdentityPool"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            },
            {
              "PolicyName": "UserGroupPassRolePolicy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "iam:PassRole"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "RoleMapFunction": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": [
          "LambdaExecutionRole"
        ],
        "Properties": {
          "Code": {
            "ZipFile": {
              "Fn::Join": [
                "\n",
                [
                  "const response = require('cfn-response');",
                  "const AWS = require('aws-sdk');",
                  "exports.handler = (event, context) => {",
                  "if (event.RequestType == 'Delete') {",
                  "    response.send(event, context, response.SUCCESS, {message: 'Request type delete'})",
                  "};",
                  "if (event.RequestType == 'Create' || event.RequestType == 'Update') {",
                  "    let { identityPoolId, appClientID, appClientIDWeb, userPoolId, region }  = event.ResourceProperties;",
                  "    try {",
                  "       const cognitoidentity = new AWS.CognitoIdentity();",
                  "       let params = {",
                  "           IdentityPoolId: identityPoolId,",
                  "           Roles: {",
                  "               'authenticated': event.ResourceProperties.AuthRoleArn,",
                  "               'unauthenticated': event.ResourceProperties.UnauthRoleArn,",
                  "           },",
                  "           RoleMappings: {}",
                  "       };",
                  "       if (appClientIDWeb) {",
                  "           params.RoleMappings[`cognito-idp.${region}.amazonaws.com/${userPoolId}:${appClientIDWeb}`] = {",
                  "               Type: 'Token',",
                  "               AmbiguousRoleResolution: 'AuthenticatedRole',",
                  "           }",
                  "       }",
                  "       if (appClientID) {",
                  "           params.RoleMappings[`cognito-idp.${region}.amazonaws.com/${userPoolId}:${appClientID}`] = {",
                  "               Type: 'Token',",
                  "               AmbiguousRoleResolution: 'AuthenticatedRole',",
                  "           }",
                  "       }",
                  "    cognitoidentity.setIdentityPoolRoles(params).promise();",
                  "    response.send(event, context, response.SUCCESS, {message: 'Successfully updated identity pool.'})",
                  "    } catch(err) {",
                  "        response.send(event, context, response.FAILED, {message: 'Error updating identity pool'});",
                  "    }",
                  "   };",
                  "};"
                ]
              ]
            }
          },
          "Handler": "index.handler",
          "Runtime": "nodejs12.x",
          "Timeout": "300",
          "Role": {
            "Fn::GetAtt": [
              "LambdaExecutionRole",
              "Arn"
            ]
          }
        }
      },
      "RoleMapFunctionInput": {
        "Type": "Custom::LambdaCallout",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "RoleMapFunction",
              "Arn"
            ]
          },
          "AuthRoleArn": {
            "Ref": "AuthRoleArn"
          },
          "UnauthRoleArn": {
            "Ref": "UnauthRoleArn"
          },
          "identityPoolId": {
            "Ref": "authcognitoa31803d7IdentityPoolId"
          },
          "userPoolId": {
            "Ref": "authcognitoa31803d7UserPoolId"
          },
          "appClientIDWeb": {
            "Ref": "authcognitoa31803d7AppClientIDWeb"
          },
          "appClientID": {
            "Ref": "authcognitoa31803d7AppClientID"
          },
          "region": {
            "Ref": "AWS::Region"
          },
          "env": {
            "Ref": "env"
          }
        },
        "DependsOn": [
          "RoleMapFunction"
        ]
      }
    },
  "Outputs": {
    "socialmediauserpoolgroupGroupRole": {
      "Value": {
        "Fn::GetAtt": [
          "socialmediauserpoolgroupGroupRole",
          "Arn"
        ]
      }
    }
  }
}
